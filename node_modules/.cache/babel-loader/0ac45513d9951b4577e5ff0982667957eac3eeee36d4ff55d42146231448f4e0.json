{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ion.catana\\\\OneDrive - ENGITEL SPA\\\\Desktop\\\\Work\\\\keycloud\\\\src\\\\components\\\\header\\\\ThemeMenuItem.js\",\n  _s = $RefreshSig$();\n// src/components/header/ThemeMenuItem.js\nimport React, { useContext } from \"react\"; // Importo React e useContext per accedere ai contesti\nimport { MenuItem, IconButton, Typography } from \"@mui/material\"; // Importo i componenti Material-UI necessari\nimport { Brightness4, Brightness7 } from \"@mui/icons-material\"; // Importo le icone per la commutazione del tema\nimport { ThemeContext } from \"../../context/ThemeContext\"; // Importo il contesto del tema personalizzato\nimport { pxToRem } from \"../../utils/pxToRem\"; // Funzione di utilità per convertire px in rem\nimport { useTheme } from \"@mui/material/styles\"; // Importo useTheme per accedere al tema corrente\nimport { useTranslation } from \"react-i18next\"; // Importo il hook useTranslation per la gestione delle traduzioni\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeMenuItem = ({\n  onClose\n}) => {\n  _s();\n  // Creo un componente funzionale per l'elemento di menu del tema\n\n  const {\n    toggleTheme,\n    mode\n  } = useContext(ThemeContext); // Uso il contesto del tema per ottenere la funzione di toggle e la modalità corrente\n  const theme = useTheme(); // Uso il tema corrente per applicare gli stili\n  const {\n    t\n  } = useTranslation(); // Uso il hook useTranslation per ottenere la funzione di traduzione\n\n  return (\n    /*#__PURE__*/\n    // MenuItem per la selezione del tema\n    _jsxDEV(MenuItem, {\n      onClick: () => {\n        toggleTheme(); // Commutazione del tema tra chiaro e scuro\n        onClose(); // Chiude il menu dopo la selezione\n      },\n      sx: {\n        display: \"flex\",\n        alignItems: \"center\",\n        gap: pxToRem(10)\n      } // Stili per il menu item\n      ,\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        children: mode === \"dark\" ? /*#__PURE__*/_jsxDEV(Brightness7, {\n          sx: {\n            color: theme.colors.pureWhite\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this) // Icona del sole per la modalità scura\n        : /*#__PURE__*/_jsxDEV(Brightness4, {\n          sx: {\n            color: theme.colors.gray\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this) // Icona della luna per la modalità chiara\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        sx: {\n          color: theme.palette.text.primary\n        },\n        children: [mode === \"dark\" ? t(\"light_mode\") : t(\"dark_mode\"), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(ThemeMenuItem, \"XKKjBmvzEpZ2NmoxV4hcNjX98DU=\", false, function () {\n  return [useTheme, useTranslation];\n});\n_c = ThemeMenuItem;\nexport default ThemeMenuItem; // Esporto il componente per l'uso in altre parti dell'app\nvar _c;\n$RefreshReg$(_c, \"ThemeMenuItem\");","map":{"version":3,"names":["React","useContext","MenuItem","IconButton","Typography","Brightness4","Brightness7","ThemeContext","pxToRem","useTheme","useTranslation","jsxDEV","_jsxDEV","ThemeMenuItem","onClose","_s","toggleTheme","mode","theme","t","onClick","sx","display","alignItems","gap","children","color","colors","pureWhite","fileName","_jsxFileName","lineNumber","columnNumber","gray","palette","text","primary","_c","$RefreshReg$"],"sources":["C:/Users/ion.catana/OneDrive - ENGITEL SPA/Desktop/Work/keycloud/src/components/header/ThemeMenuItem.js"],"sourcesContent":["// src/components/header/ThemeMenuItem.js\r\nimport React, { useContext } from \"react\"; // Importo React e useContext per accedere ai contesti\r\nimport { MenuItem, IconButton, Typography } from \"@mui/material\"; // Importo i componenti Material-UI necessari\r\nimport { Brightness4, Brightness7 } from \"@mui/icons-material\"; // Importo le icone per la commutazione del tema\r\nimport { ThemeContext } from \"../../context/ThemeContext\"; // Importo il contesto del tema personalizzato\r\nimport { pxToRem } from \"../../utils/pxToRem\"; // Funzione di utilità per convertire px in rem\r\nimport { useTheme } from \"@mui/material/styles\"; // Importo useTheme per accedere al tema corrente\r\nimport { useTranslation } from \"react-i18next\"; // Importo il hook useTranslation per la gestione delle traduzioni\r\n\r\nconst ThemeMenuItem = ({ onClose }) => {\r\n  // Creo un componente funzionale per l'elemento di menu del tema\r\n\r\n  const { toggleTheme, mode } = useContext(ThemeContext); // Uso il contesto del tema per ottenere la funzione di toggle e la modalità corrente\r\n  const theme = useTheme(); // Uso il tema corrente per applicare gli stili\r\n  const { t } = useTranslation(); // Uso il hook useTranslation per ottenere la funzione di traduzione\r\n\r\n  return (\r\n    // MenuItem per la selezione del tema\r\n    <MenuItem\r\n      onClick={() => {\r\n        toggleTheme(); // Commutazione del tema tra chiaro e scuro\r\n        onClose(); // Chiude il menu dopo la selezione\r\n      }}\r\n      sx={{ display: \"flex\", alignItems: \"center\", gap: pxToRem(10) }} // Stili per il menu item\r\n    >\r\n      {/* Icona per la selezione del tema */}\r\n      <IconButton>\r\n        {mode === \"dark\" ? (\r\n          <Brightness7 sx={{ color: theme.colors.pureWhite }} /> // Icona del sole per la modalità scura\r\n        ) : (\r\n          <Brightness4 sx={{ color: theme.colors.gray }} /> // Icona della luna per la modalità chiara\r\n        )}\r\n      </IconButton>\r\n      {/* Testo che descrive il tema corrente */}\r\n      <Typography sx={{ color: theme.palette.text.primary }}>\r\n        {mode === \"dark\" ? t(\"light_mode\") : t(\"dark_mode\")}{\" \"}\r\n        {/* Usa la funzione t per ottenere la traduzione del testo per il tema */}\r\n      </Typography>\r\n    </MenuItem>\r\n  );\r\n};\r\n\r\nexport default ThemeMenuItem; // Esporto il componente per l'uso in altre parti dell'app\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO,CAAC,CAAC;AAC3C,SAASC,QAAQ,EAAEC,UAAU,EAAEC,UAAU,QAAQ,eAAe,CAAC,CAAC;AAClE,SAASC,WAAW,EAAEC,WAAW,QAAQ,qBAAqB,CAAC,CAAC;AAChE,SAASC,YAAY,QAAQ,4BAA4B,CAAC,CAAC;AAC3D,SAASC,OAAO,QAAQ,qBAAqB,CAAC,CAAC;AAC/C,SAASC,QAAQ,QAAQ,sBAAsB,CAAC,CAAC;AACjD,SAASC,cAAc,QAAQ,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACrC;;EAEA,MAAM;IAAEC,WAAW;IAAEC;EAAK,CAAC,GAAGhB,UAAU,CAACM,YAAY,CAAC,CAAC,CAAC;EACxD,MAAMW,KAAK,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1B,MAAM;IAAEU;EAAE,CAAC,GAAGT,cAAc,CAAC,CAAC,CAAC,CAAC;;EAEhC;IAAA;IACE;IACAE,OAAA,CAACV,QAAQ;MACPkB,OAAO,EAAEA,CAAA,KAAM;QACbJ,WAAW,CAAC,CAAC,CAAC,CAAC;QACfF,OAAO,CAAC,CAAC,CAAC,CAAC;MACb,CAAE;MACFO,EAAE,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,UAAU,EAAE,QAAQ;QAAEC,GAAG,EAAEhB,OAAO,CAAC,EAAE;MAAE,CAAE,CAAC;MAAA;MAAAiB,QAAA,gBAGjEb,OAAA,CAACT,UAAU;QAAAsB,QAAA,EACRR,IAAI,KAAK,MAAM,gBACdL,OAAA,CAACN,WAAW;UAACe,EAAE,EAAE;YAAEK,KAAK,EAAER,KAAK,CAACS,MAAM,CAACC;UAAU;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,CAAC;QAAA,eAEvDpB,OAAA,CAACP,WAAW;UAACgB,EAAE,EAAE;YAAEK,KAAK,EAAER,KAAK,CAACS,MAAM,CAACM;UAAK;QAAE;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,CAAC;MACnD;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACS,CAAC,eAEbpB,OAAA,CAACR,UAAU;QAACiB,EAAE,EAAE;UAAEK,KAAK,EAAER,KAAK,CAACgB,OAAO,CAACC,IAAI,CAACC;QAAQ,CAAE;QAAAX,QAAA,GACnDR,IAAI,KAAK,MAAM,GAAGE,CAAC,CAAC,YAAY,CAAC,GAAGA,CAAC,CAAC,WAAW,CAAC,EAAE,GAAG;MAAA;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE9C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;AAEf,CAAC;AAACjB,EAAA,CA/BIF,aAAa;EAAA,QAIHJ,QAAQ,EACRC,cAAc;AAAA;AAAA2B,EAAA,GALxBxB,aAAa;AAiCnB,eAAeA,aAAa,CAAC,CAAC;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}