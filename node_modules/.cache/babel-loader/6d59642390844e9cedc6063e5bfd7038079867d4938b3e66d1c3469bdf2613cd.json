{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ion.catana\\\\OneDrive - ENGITEL SPA\\\\Desktop\\\\Work\\\\keycloud\\\\src\\\\context\\\\ThemeContext.js\",\n  _s = $RefreshSig$();\n// src/context/ThemeContext.js\nimport React, { createContext, useMemo, useState } from \"react\"; // Importo React e gli hook necessari per creare il contesto e gestire lo stato\nimport { ThemeProvider as MuiThemeProvider } from \"@mui/material/styles\"; // Importo ThemeProvider da Material-UI per applicare il tema all'applicazione\nimport CssBaseline from \"@mui/material/CssBaseline\"; // Importo CssBaseline per resettare i CSS di base\nimport theme from \"../theme\"; // Importo il file di configurazione del tema\n\n// Creo il contesto per gestire il tema dell'applicazione\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext(); // Creo il contesto per il tema\n\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // Creo un componente provider per avvolgere l'applicazione e fornire il tema\n\n  const [mode, setMode] = useState(\"dark\"); // Inizializzo lo stato della modalità tema a \"dark\" (scuro)\n\n  // Funzione per alternare tra il tema \"light\" (chiaro) e \"dark\" (scuro)\n  const toggleTheme = () => {\n    setMode(prevMode => prevMode === \"light\" ? \"dark\" : \"light\"); // Se il tema corrente è \"light\", lo cambio a \"dark\" e viceversa\n  };\n\n  // Uso useMemo per memorizzare il valore del tema e rigenerarlo solo quando cambia la modalità\n  const themeValue = useMemo(() => theme(mode), [mode]); // Genero il tema dinamicamente in base alla modalità corrente\n\n  return (\n    /*#__PURE__*/\n    // Fornisco il contesto del tema e il provider di Material-UI\n    _jsxDEV(ThemeContext.Provider, {\n      value: {\n        toggleTheme,\n        mode\n      },\n      children: [\" \", /*#__PURE__*/_jsxDEV(MuiThemeProvider, {\n        theme: themeValue,\n        children: [\" \", /*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }, this), \" \", children, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(ThemeProvider, \"C6u6sjlgWm15GfmfmdHFMN12gps=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useMemo","useState","ThemeProvider","MuiThemeProvider","CssBaseline","theme","jsxDEV","_jsxDEV","ThemeContext","children","_s","mode","setMode","toggleTheme","prevMode","themeValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ion.catana/OneDrive - ENGITEL SPA/Desktop/Work/keycloud/src/context/ThemeContext.js"],"sourcesContent":["// src/context/ThemeContext.js\r\nimport React, { createContext, useMemo, useState } from \"react\"; // Importo React e gli hook necessari per creare il contesto e gestire lo stato\r\nimport { ThemeProvider as MuiThemeProvider } from \"@mui/material/styles\"; // Importo ThemeProvider da Material-UI per applicare il tema all'applicazione\r\nimport CssBaseline from \"@mui/material/CssBaseline\"; // Importo CssBaseline per resettare i CSS di base\r\nimport theme from \"../theme\"; // Importo il file di configurazione del tema\r\n\r\n// Creo il contesto per gestire il tema dell'applicazione\r\nexport const ThemeContext = createContext(); // Creo il contesto per il tema\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  // Creo un componente provider per avvolgere l'applicazione e fornire il tema\r\n\r\n  const [mode, setMode] = useState(\"dark\"); // Inizializzo lo stato della modalità tema a \"dark\" (scuro)\r\n\r\n  // Funzione per alternare tra il tema \"light\" (chiaro) e \"dark\" (scuro)\r\n  const toggleTheme = () => {\r\n    setMode((prevMode) => (prevMode === \"light\" ? \"dark\" : \"light\")); // Se il tema corrente è \"light\", lo cambio a \"dark\" e viceversa\r\n  };\r\n\r\n  // Uso useMemo per memorizzare il valore del tema e rigenerarlo solo quando cambia la modalità\r\n  const themeValue = useMemo(() => theme(mode), [mode]); // Genero il tema dinamicamente in base alla modalità corrente\r\n\r\n  return (\r\n    // Fornisco il contesto del tema e il provider di Material-UI\r\n    <ThemeContext.Provider value={{ toggleTheme, mode }}>\r\n      {\" \"}\r\n      {/* Fornisco la funzione toggleTheme e la modalità corrente al contesto */}\r\n      <MuiThemeProvider theme={themeValue}>\r\n        {\" \"}\r\n        {/* Applico il tema corrente utilizzando il ThemeProvider di Material-UI */}\r\n        <CssBaseline />{\" \"}\r\n        {/* Aggiungo CssBaseline per garantire che gli stili di base siano applicati in modo uniforme */}\r\n        {children}{\" \"}\r\n        {/* Renderizzo i componenti figli all'interno del provider del tema */}\r\n      </MuiThemeProvider>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO,CAAC,CAAC;AACjE,SAASC,aAAa,IAAIC,gBAAgB,QAAQ,sBAAsB,CAAC,CAAC;AAC1E,OAAOC,WAAW,MAAM,2BAA2B,CAAC,CAAC;AACrD,OAAOC,KAAK,MAAM,UAAU,CAAC,CAAC;;AAE9B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,YAAY,gBAAGT,aAAa,CAAC,CAAC,CAAC,CAAC;;AAE7C,OAAO,MAAMG,aAAa,GAAGA,CAAC;EAAEO;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C;;EAEA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;;EAE1C;EACA,MAAMY,WAAW,GAAGA,CAAA,KAAM;IACxBD,OAAO,CAAEE,QAAQ,IAAMA,QAAQ,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC,CAAC,CAAC;EACpE,CAAC;;EAED;EACA,MAAMC,UAAU,GAAGf,OAAO,CAAC,MAAMK,KAAK,CAACM,IAAI,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEvD;IAAA;IACE;IACAJ,OAAA,CAACC,YAAY,CAACQ,QAAQ;MAACC,KAAK,EAAE;QAAEJ,WAAW;QAAEF;MAAK,CAAE;MAAAF,QAAA,GACjD,GAAG,eAEJF,OAAA,CAACJ,gBAAgB;QAACE,KAAK,EAAEU,UAAW;QAAAN,QAAA,GACjC,GAAG,eAEJF,OAAA,CAACH,WAAW;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EAAC,GAAG,EAElBZ,QAAQ,EAAE,GAAG;MAAA;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;AAE5B,CAAC;AAACX,EAAA,CA5BWR,aAAa;AAAAoB,EAAA,GAAbpB,aAAa;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}