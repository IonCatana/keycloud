{"ast":null,"code":"// src/utils/pxToRem.js\n\n/**\r\n * Converte i pixel (px) in rem\r\n * @param {number} px - Il valore in pixel da convertire\r\n * @param {number} [baseFontSize=16] - La dimensione del font base (default è 16px)\r\n * @returns {string} - Il valore convertito in rem con l'unità 'rem' inclusa\r\n */\nexport const pxToRem = (px, baseFontSize = 16) => {\n  if (typeof px !== \"number\" || typeof baseFontSize !== \"number\") {\n    throw new TypeError(\"Both px and baseFontSize should be numbers\");\n  }\n  if (baseFontSize <= 0) {\n    throw new RangeError(\"baseFontSize should be a positive non-zero number\");\n  }\n  return `${px / baseFontSize}rem`;\n};","map":{"version":3,"names":["pxToRem","px","baseFontSize","TypeError","RangeError"],"sources":["C:/Users/ion.catana/OneDrive - ENGITEL SPA/Desktop/Work/keycloud/src/utils/pxToRem.js"],"sourcesContent":["// src/utils/pxToRem.js\r\n\r\n/**\r\n * Converte i pixel (px) in rem\r\n * @param {number} px - Il valore in pixel da convertire\r\n * @param {number} [baseFontSize=16] - La dimensione del font base (default è 16px)\r\n * @returns {string} - Il valore convertito in rem con l'unità 'rem' inclusa\r\n */\r\nexport const pxToRem = (px, baseFontSize = 16) => {\r\n  if (typeof px !== \"number\" || typeof baseFontSize !== \"number\") {\r\n    throw new TypeError(\"Both px and baseFontSize should be numbers\");\r\n  }\r\n  if (baseFontSize <= 0) {\r\n    throw new RangeError(\"baseFontSize should be a positive non-zero number\");\r\n  }\r\n  return `${px / baseFontSize}rem`;\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,OAAO,GAAGA,CAACC,EAAE,EAAEC,YAAY,GAAG,EAAE,KAAK;EAChD,IAAI,OAAOD,EAAE,KAAK,QAAQ,IAAI,OAAOC,YAAY,KAAK,QAAQ,EAAE;IAC9D,MAAM,IAAIC,SAAS,CAAC,4CAA4C,CAAC;EACnE;EACA,IAAID,YAAY,IAAI,CAAC,EAAE;IACrB,MAAM,IAAIE,UAAU,CAAC,mDAAmD,CAAC;EAC3E;EACA,OAAO,GAAGH,EAAE,GAAGC,YAAY,KAAK;AAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}